#!/bin/bash

# Security Scanning Script for Yourl.Cloud Docker Images
# Author: Yourl Cloud Inc.
# Reference Code: 38f26aee-4e52-484e-bbc8-d973ca0bcb10

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
IMAGE_NAME="yourl-cloud"
IMAGE_TAG="latest"
FULL_IMAGE_NAME="${IMAGE_NAME}:${IMAGE_TAG}"
SCAN_RESULTS_DIR="./security-scan-results"
DATE=$(date +%Y%m%d_%H%M%S)

echo -e "${BLUE}🔒 Yourl.Cloud Security Scanner${NC}"
echo -e "${BLUE}================================${NC}"
echo ""

# Create results directory
mkdir -p "$SCAN_RESULTS_DIR"

# Function to log results
log_result() {
    local level=$1
    local message=$2
    case $level in
        "INFO")
            echo -e "${BLUE}ℹ️  $message${NC}"
            ;;
        "SUCCESS")
            echo -e "${GREEN}✅ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}⚠️  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}❌ $message${NC}"
            ;;
    esac
}

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    log_result "ERROR" "Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if image exists
if ! docker image inspect "$FULL_IMAGE_NAME" > /dev/null 2>&1; then
    log_result "WARNING" "Image $FULL_IMAGE_NAME not found. Building image first..."
    docker build -t "$FULL_IMAGE_NAME" .
fi

log_result "INFO" "Starting security scan for $FULL_IMAGE_NAME"

# 1. Docker built-in scanner
log_result "INFO" "Running Docker built-in vulnerability scan..."
docker scan --json "$FULL_IMAGE_NAME" > "$SCAN_RESULTS_DIR/docker-scan-$DATE.json" 2>/dev/null || {
    log_result "WARNING" "Docker scan failed or not available. Skipping..."
}

# 2. Check for Trivy
if command -v trivy > /dev/null 2>&1; then
    log_result "INFO" "Running Trivy vulnerability scan..."
    trivy image --format json --output "$SCAN_RESULTS_DIR/trivy-scan-$DATE.json" "$FULL_IMAGE_NAME" || {
        log_result "WARNING" "Trivy scan failed. Skipping..."
    }
else
    log_result "WARNING" "Trivy not installed. Install with: brew install trivy (macOS) or follow https://aquasecurity.github.io/trivy/latest/getting-started/installation/"
fi

# 3. Check for Snyk
if command -v snyk > /dev/null 2>&1; then
    log_result "INFO" "Running Snyk container scan..."
    snyk container test "$FULL_IMAGE_NAME" --json > "$SCAN_RESULTS_DIR/snyk-scan-$DATE.json" 2>/dev/null || {
        log_result "WARNING" "Snyk scan failed. Skipping..."
    }
else
    log_result "WARNING" "Snyk not installed. Install with: npm install -g snyk"
fi

# 4. Container runtime security checks
log_result "INFO" "Running container runtime security checks..."

# Check if container runs as non-root
docker run --rm --entrypoint id "$FULL_IMAGE_NAME" > /tmp/container-user.txt 2>/dev/null || true
if grep -q "uid=0" /tmp/container-user.txt; then
    log_result "WARNING" "Container is running as root user"
else
    log_result "SUCCESS" "Container is running as non-root user"
fi

# Check exposed ports
EXPOSED_PORTS=$(docker image inspect "$FULL_IMAGE_NAME" --format='{{range $k, $v := .Config.ExposedPorts}}{{$k}} {{end}}')
if [ -n "$EXPOSED_PORTS" ]; then
    log_result "INFO" "Exposed ports: $EXPOSED_PORTS"
else
    log_result "WARNING" "No ports exposed in image"
fi

# 5. Generate security report
log_result "INFO" "Generating security report..."

cat > "$SCAN_RESULTS_DIR/security-report-$DATE.md" << EOF
# Security Scan Report - $DATE

## Image Information
- **Image**: $FULL_IMAGE_NAME
- **Scan Date**: $(date)
- **Scanner Version**: $(docker --version)

## Scan Results

### Docker Built-in Scanner
\`\`\`json
$(cat "$SCAN_RESULTS_DIR/docker-scan-$DATE.json" 2>/dev/null || echo "Scan not available")
\`\`\`

### Trivy Scanner
\`\`\`json
$(cat "$SCAN_RESULTS_DIR/trivy-scan-$DATE.json" 2>/dev/null || echo "Scan not available")
\`\`\`

### Snyk Scanner
\`\`\`json
$(cat "$SCAN_RESULTS_DIR/snyk-scan-$DATE.json" 2>/dev/null || echo "Scan not available")
\`\`\`

## Recommendations

1. **Regular Updates**: Update base image and dependencies regularly
2. **Vulnerability Monitoring**: Set up automated vulnerability scanning
3. **Security Patching**: Apply security patches promptly
4. **Access Control**: Ensure proper user permissions and access controls

## Contact Information

- **Security Team**: security@yourl.cloud
- **Reference Code**: 38f26aee-4e52-484e-bbc8-d973ca0bcb10
- **Response Time**: 48 hours for initial response

---
*Generated by Yourl.Cloud Security Scanner*
EOF

log_result "SUCCESS" "Security scan completed. Results saved to $SCAN_RESULTS_DIR/"

# 6. Display summary
echo ""
echo -e "${BLUE}📊 Security Scan Summary${NC}"
echo -e "${BLUE}========================${NC}"
echo ""

if [ -f "$SCAN_RESULTS_DIR/docker-scan-$DATE.json" ]; then
    VULNERABILITIES=$(grep -c "vulnerability" "$SCAN_RESULTS_DIR/docker-scan-$DATE.json" 2>/dev/null || echo "0")
    log_result "INFO" "Docker scan found $VULNERABILITIES potential vulnerabilities"
fi

if [ -f "$SCAN_RESULTS_DIR/trivy-scan-$DATE.json" ]; then
    VULNERABILITIES=$(grep -c "VulnerabilityID" "$SCAN_RESULTS_DIR/trivy-scan-$DATE.json" 2>/dev/null || echo "0")
    log_result "INFO" "Trivy scan found $VULNERABILITIES potential vulnerabilities"
fi

log_result "SUCCESS" "Security scan report generated: $SCAN_RESULTS_DIR/security-report-$DATE.md"

# Cleanup
rm -f /tmp/container-user.txt

echo ""
log_result "INFO" "For detailed analysis, review the generated reports in $SCAN_RESULTS_DIR/"
log_result "INFO" "For security issues, contact: security@yourl.cloud"
