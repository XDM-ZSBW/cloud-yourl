"""
Code validation and security monitoring for Yourl.Cloud
Ensures build codes are never exposed publicly
"""

import os
import json
import smtplib
from email.message import EmailMessage
from datetime import datetime, timezone
from typing import Dict, List, Optional, Tuple

class CodeValidator:
    def __init__(self, project_id: str):
        self.project_id = project_id
        self.codes_file = "codes/marketing_codes.json"
        self.alert_email = "bcherrman@gmail.com"

    def validate_code(self, input_code: str, is_dev: bool = False) -> Tuple[bool, Dict]:
        """
        Validate a code and return appropriate response
        Returns: (is_valid, response_data)
        """
        try:
            with open(self.codes_file, 'r') as f:
                codes_data = json.load(f)
        except FileNotFoundError:
            return False, {"error": "Code validation unavailable"}

        # Check if code exists
        code_info = None
        for code in codes_data.get('codes', []):
            if code['code'] == input_code:
                code_info = code
                break

        if not code_info:
            return False, {"error": "Invalid code"}

        # Security check: BUILD codes only allowed in dev
        if code_info['code'].startswith('BUILD-') and not is_dev:
            self._send_security_alert(f"BUILD code {input_code} attempted to be used in production")
            return False, {"error": "Invalid code"}

        # Get visible codes based on environment
        visible_codes = self._get_visible_codes(is_dev)

        return True, {
            "valid": True,
            "code_info": code_info,
            "visible_codes": visible_codes
        }

    def _get_visible_codes(self, is_dev: bool) -> List[Dict]:
        """Get list of codes that should be visible in current environment"""
        try:
            with open(self.codes_file, 'r') as f:
                codes_data = json.load(f)
        except FileNotFoundError:
            return []

        visible_codes = []
        for code in codes_data.get('codes', []):
            # Skip BUILD codes in production
            if not is_dev and code['code'].startswith('BUILD-'):
                continue
            
            # Include basic info only
            visible_codes.append({
                'code': code['code'],
                'type': code['type'],
                'created_at': code['created_at']
            })

        return sorted(visible_codes, key=lambda x: x['created_at'], reverse=True)

    def _send_security_alert(self, message: str):
        """Send security alert email"""
        try:
            msg = EmailMessage()
            msg.set_content(f"""
Security Alert from Yourl.Cloud Code Validator

Time: {datetime.now(timezone.utc).isoformat()}
Project: {self.project_id}

Alert: {message}

This email was automatically generated by the Yourl.Cloud security monitoring system.
""")

            msg['Subject'] = 'Yourl.Cloud Security Alert - Build Code Access Attempt'
            msg['From'] = "security-monitor@yourl.cloud"
            msg['To'] = self.alert_email

            # Use SendGrid API key from environment
            api_key = os.environ.get('SENDGRID_API_KEY')
            if api_key:
                from sendgrid import SendGridAPIClient
                from sendgrid.helpers.mail import Mail
                
                sg = SendGridAPIClient(api_key)
                mail = Mail(
                    from_email="security-monitor@yourl.cloud",
                    to_emails=self.alert_email,
                    subject='Yourl.Cloud Security Alert - Build Code Access Attempt',
                    plain_text_content=msg.get_content()
                )
                sg.send(mail)
        except Exception as e:
            print(f"Failed to send security alert: {str(e)}")

    def get_current_public_codes(self) -> Tuple[str, str]:
        """Get current and next public codes"""
        try:
            with open(self.codes_file, 'r') as f:
                codes = json.load(f)
                return codes.get('current_public_code', ''), codes.get('next_public_code', '')
        except FileNotFoundError:
            return '', ''

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Yourl.Cloud Code Validator")
    parser.add_argument("--project", required=True, help="Google Cloud project ID")
    parser.add_argument("--code", required=True, help="Code to validate")
    parser.add_argument("--dev", action="store_true", help="Running in dev environment")
    
    args = parser.parse_args()
    
    validator = CodeValidator(args.project)
    is_valid, response = validator.validate_code(args.code, args.dev)
    
    if is_valid:
        print("Code valid!")
        print(f"Type: {response['code_info']['type']}")
        print(f"Created: {response['code_info']['created_at']}")
        print("\nVisible codes:")
        for code in response['visible_codes']:
            print(f"- {code['code']} ({code['type']}) - {code['created_at']}")
    else:
        print(f"Error: {response['error']}")
