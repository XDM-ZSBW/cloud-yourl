#!/usr/bin/env python3
"""
Test script to verify the authentication JSON response logic
"""

import os
import sys
from datetime import datetime
import subprocess

# Add current directory to path
sys.path.insert(0, '.')

def test_auth_response():
    """Test the authentication response logic"""
    
    # Mock the environment
    os.environ['GOOGLE_CLOUD_PROJECT'] = 'yourl-cloud'
    
    # Import the functions we need to test
    from app import get_current_marketing_password, get_next_marketing_password, get_visitor_data, get_original_protocol, get_original_host
    
    # Get current and next passwords
    current_password = get_current_marketing_password()
    next_password = get_next_marketing_password()
    
    print(f"‚úÖ Current password: {current_password}")
    print(f"‚úÖ Next password: {next_password}")
    
    # Get visitor data
    visitor_data = get_visitor_data()
    visitor_id = visitor_data.get('visitor_id', 'unknown')
    
    print(f"‚úÖ Visitor ID: {visitor_id}")
    print(f"‚úÖ Total visits: {visitor_data.get('total_visits', 1)}")
    print(f"‚úÖ Is new visitor: {visitor_data.get('is_new_visitor', True)}")
    print(f"‚úÖ Has used code: {visitor_data.get('has_used_code', False)}")
    
    # Get build version
    try:
        build_version = subprocess.check_output(['git', 'rev-parse', 'HEAD'], 
                                             text=True, stderr=subprocess.DEVNULL).strip()[:8]
    except:
        build_version = "unknown"
    
    print(f"‚úÖ Build version: {build_version}")
    
    # Test the JSON response structure
    json_response = {
        "status": "authenticated",
        "message": "üéâ Welcome to Yourl.Cloud! This is your first visit!",
        "experience_level": "new_user",
        "visitor_data": {
            "visitor_id": visitor_id,
            "total_visits": visitor_data.get('total_visits', 1),
            "is_new_visitor": visitor_data.get('is_new_visitor', True),
            "has_used_code": visitor_data.get('has_used_code', False),
            "tracking_key": visitor_data.get('tracking_key')
        },
        "landing_page": {
            "url": f"{get_original_protocol()}://{get_original_host()}/",
            "build_version": build_version,
            "marketing_code": current_password
        },
        "current_marketing_password": current_password,
        "next_marketing_password": next_password,
        "ownership": {
            "perplexity": "current_marketing_password",
            "cursor": "next_marketing_password"
        },
        "navigation": {
            "back_to_landing": f"{get_original_protocol()}://{get_original_host()}/",
            "api_endpoint": f"{get_original_protocol()}://{get_original_host()}/api",
            "status_page": f"{get_original_protocol()}://{get_original_host()}/status"
        },
        "timestamp": datetime.utcnow().isoformat(),
        "organization": "Yourl Cloud Inc."
    }
    
    print("\n‚úÖ JSON Response Structure:")
    print(f"  - Status: {json_response['status']}")
    print(f"  - Message: {json_response['message']}")
    print(f"  - Experience Level: {json_response['experience_level']}")
    print(f"  - Landing Page URL: {json_response['landing_page']['url']}")
    print(f"  - Back to Landing: {json_response['navigation']['back_to_landing']}")
    print(f"  - API Endpoint: {json_response['navigation']['api_endpoint']}")
    print(f"  - Status Page: {json_response['navigation']['status_page']}")
    
    # Test with the current password
    test_password = current_password
    print(f"\nüß™ Testing authentication with password: {test_password}")
    
    if test_password == current_password:
        print("‚úÖ Authentication would succeed!")
        print("‚úÖ JSON response would be returned with actual URLs")
        print("‚úÖ Landing page version would be stored in SQL (if DB available)")
        print("‚úÖ Experience would be personalized based on visitor data")
        return True
    else:
        print("‚ùå Authentication would fail!")
        return False

if __name__ == "__main__":
    print("üß™ Testing Authentication JSON Response Logic")
    print("=" * 50)
    
    success = test_auth_response()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ All tests passed! Ready for deployment.")
    else:
        print("‚ùå Tests failed!")
